Questions notes.

-------------------------------------------------------------------------------------------------

What languages are included in the ReactiveX Family?
Java, Kotlin, Swift, Lua, C++, C#, Ruby, PHP, Python, Javascript

Feedback
That's Right! ReactiveX covers a ton of languages across many different platforms.
-------------------------------------------------------------------------------------------------

Observables are only used for looping through arrays?  is FALSE

Feedback
Correct!
They can be used to handle user input, be notified when a Network Task has completed, and so much more.
-------------------------------------------------------------------------------------------------

What are the 3 levels of Observables based on complexity?
Relays, Subjects, Observables

Feedback
Nice! Start with relays, if you need errors or completion events, use subjects, otherwise use observables.
-------------------------------------------------------------------------------------------------

Relays only give values to subscriptions? is TRUE

Feedback
One reason for using a relay is that you can get the value any time by using
`.value` and can set it by using `.accept(newValue)`
-------------------------------------------------------------------------------------------------

Subjects can error out and complete, but Relays don't.? is TRUE

Feedback
This is the major difference between Relays and Subjects.
-------------------------------------------------------------------------------------------------

onError can handle multiple exceptions.? is FALSE

Feedback
Your right. Careful here, a second error/exception will crash the application.
-------------------------------------------------------------------------------------------------

onNext Events will continue to come in after an onError event is triggered. is FALSE

Feedback
Correct. Once an error occurs, your Subject dies a horrible death (i.e. no more events).
-------------------------------------------------------------------------------------------------

You must always use onComplete events? is FALSE

Feedback
Yup, it's completely optional.
-------------------------------------------------------------------------------------------------

When would you use Observable.create()? For a Network Call

Feedback
Yes! I'd say don't overuse them, and keep things simple.
Complex Tasks are a great place for creating an Observable from scratch.
-------------------------------------------------------------------------------------------------

Observable.fromArray() is the same as a plain old for loop? is FALSE

Feedback
Observables just prepare the values to be consumed by a subscriber.
They are a stream of single points of data that changes over time - not an array at all.
And no code is executed until we have a subscriber.
-------------------------------------------------------------------------------------------------
Traits use rare and useless.? is FALSE

Feedback
Correct. Many tasks are something you would trigger only once.
Sometimes you don't care about the value, and usually you want to know if there are any errors.
You will see these a lot more often than just a plain old Observable.
-------------------------------------------------------------------------------------------------
What is JsonPlaceholder? a convenient webserver for mocking JSON API calls

Feedback
Yes! Need to write something for an endpoint that doesn't exist?
JsonPlaceholder can be used and even changed to load whatever JSON data you need.
-------------------------------------------------------------------------------------------------
It's better to not use a Single with network calls? FALSE

Feedback
Right, Singles are great for one off tasks such as network calls.
-------------------------------------------------------------------------------------------------

How are events in Singles Different from Relay's, Subjects, and
Observables? The have onSuccess instead of onNext.

Feedback
Yes, the callback signature has an onSuccess event to work with instead of onNext
-------------------------------------------------------------------------------------------------

RxJava doesn't work well with Architecture? FALSE

Feedback
Correct, it's False. RxJava can work really well, especially if you just bubble up events through
the different layers.
-------------------------------------------------------------------------------------------------
The Model Layer may need to run code on the main thread after a network or database call? TRUE


Feedback
Yes. A good rule to follow is whichever layer left the main thread,
is responsible for joining back to the main thread.
If this isn't possible do it the next layer up -
and always observe on the main thread in the View layer.
-------------------------------------------------------------------------------------------------
What is the best API design to use for the data layer? Asynchronous

Feedback
Correct. It's easier to always have the same api, and some calls must be asynchronous,
so making all api's asynchronous gives us a single pattern for getting data.
-------------------------------------------------------------------------------------------------

When using room or sqlite, we don't have to worry about threading and contexts to the database?
TRUE

Feedback
Room and sqlite typically have the results moved to a POKO class immediately.
If you use cursors, or databases such as Realm, you will have to worry about threading and bridging data.
-------------------------------------------------------------------------------------------------
What is Retrofit? An incredible library that simplifies networking

Feedback

-------------------------------------------------------------------------------------------------

Retrofit with RxJava can make things even easier? TRUE

Feedback
True! We can just return Single's and let the upper layers worry about the results or errors.
Other layers will simple be pass through layers.
-------------------------------------------------------------------------------------------------
It's possible to group a bunch of tasks using Observable.zip? TRUE

Feedback
Yes. This allows us to group several API calls into a single result.
-------------------------------------------------------------------------------------------------
When Zipping observables that have errors, use the following to avoid crashes:
USE THE onErrorReturn() METHOD.

Feedback
Without this, it's hard to catch a fatal error in observables
-------------------------------------------------------------------------------------------------
RxJava works well with optionals? FALSE

Feedback
Sadly, It doesn't works well with optionals. You have to wrap them in a NullBox of some kind.
-------------------------------------------------------------------------------------------------
onError receives exceptions, but only once? TRUE

Feedback
Right, onError will trigger once then the observable dies.
Any other onError event that gets pushed will crash the app.
-------------------------------------------------------------------------------------------------

The easiest way to "bind" data is just updating UI controls in the subscribe block? TRUE

Feedback
This is much less intrusive than bringing data-binding into your whole project.
-------------------------------------------------------------------------------------------------

Binding Textviews saves you time and reduces the amount of code needed? FALSE

Feedback
Binding Textviews doesn't really reduce the code, and doesn't save much time.
Binding to Lists might be something that is a little more useful.
-------------------------------------------------------------------------------------------------

When binding views, what does their root element need to be in their layout? A Simply a layout

Feedback
Just make the root node be a layout.
-------------------------------------------------------------------------------------------------

RecyclerViews can only show one type of item? FALSE

Feedback
No. This video was all about how to show multiple types of items in the RecyclerView
-------------------------------------------------------------------------------------------------

It doesn't matter what thread you update the UI on? FALSE

Feedback
UI updates must be on the main thread.
-------------------------------------------------------------------------------------------------
What does observeOn do vs. subscribeOn

Feedback
The observeOn() method tells the subscription what thread to run on and,
while the onSubscribe() method tells the observable block what thread to run on.